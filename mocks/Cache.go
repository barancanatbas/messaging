// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *Cache) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key, value
func (_m *Cache) Get(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LIndex provides a mock function with given fields: key, index, data
func (_m *Cache) LIndex(key string, index int, data interface{}) error {
	ret := _m.Called(key, index, data)

	if len(ret) == 0 {
		panic("no return value specified for LIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, interface{}) error); ok {
		r0 = rf(key, index, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LPush provides a mock function with given fields: key, value
func (_m *Cache) LPush(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for LPush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LRange provides a mock function with given fields: key, start, stop, data
func (_m *Cache) LRange(key string, start int64, stop int64, data interface{}) error {
	ret := _m.Called(key, start, stop, data)

	if len(ret) == 0 {
		panic("no return value specified for LRange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64, interface{}) error); ok {
		r0 = rf(key, start, stop, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *Cache) Set(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
