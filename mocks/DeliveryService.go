// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	request "github.com/barancanatbas/messaging/internal/domain/request"
	response "github.com/barancanatbas/messaging/internal/domain/response"
	mock "github.com/stretchr/testify/mock"
)

// DeliveryService is an autogenerated mock type for the DeliveryService type
type DeliveryService struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: data
func (_m *DeliveryService) SendMessage(data *request.MessageRequest) (*response.MessageResponse, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *response.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.MessageRequest) (*response.MessageResponse, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*request.MessageRequest) *response.MessageResponse); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.MessageRequest) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeliveryService creates a new instance of DeliveryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeliveryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeliveryService {
	mock := &DeliveryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
