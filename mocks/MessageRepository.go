// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/barancanatbas/messaging/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: msg
func (_m *MessageRepository) CreateMessage(msg *entity.Message) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSentMessages provides a mock function with given fields:
func (_m *MessageRepository) GetSentMessages() ([]entity.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSentMessages")
	}

	var r0 []entity.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnsentMessages provides a mock function with given fields: lastMessageId
func (_m *MessageRepository) GetUnsentMessages(lastMessageId int) (*sql.Rows, error) {
	ret := _m.Called(lastMessageId)

	if len(ret) == 0 {
		panic("no return value specified for GetUnsentMessages")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*sql.Rows, error)); ok {
		return rf(lastMessageId)
	}
	if rf, ok := ret.Get(0).(func(int) *sql.Rows); ok {
		r0 = rf(lastMessageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(lastMessageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkMessageAsSent provides a mock function with given fields: id, uuid, sentAt
func (_m *MessageRepository) MarkMessageAsSent(id int, uuid string, sentAt time.Time) error {
	ret := _m.Called(id, uuid, sentAt)

	if len(ret) == 0 {
		panic("no return value specified for MarkMessageAsSent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, time.Time) error); ok {
		r0 = rf(id, uuid, sentAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scan provides a mock function with given fields: rows, msg
func (_m *MessageRepository) Scan(rows *sql.Rows, msg *entity.Message) error {
	ret := _m.Called(rows, msg)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Rows, *entity.Message) error); ok {
		r0 = rf(rows, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
